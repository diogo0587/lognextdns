    - name: Check Notion Database and Process Logs
      run: |
        python - <<EOF
        import requests
        import json
        from datetime import datetime

        # Configurações
        NOTION_API_KEY = 'ntn_G89151370362xFd0vbIxGyRniZndeBtI9z3HgYgt7Z6fvY'
        NOTION_DATABASE_ID = '14c21362320c81e78569fe440f1ae157'
        NEXTDNS_API_KEY = 'f31f2871d328a52a45fefadc09a1c67d0dd5d53d'
        NEXTDNS_PROFILE_ID = '85d564'

        NOTION_HEADERS = {
            'Authorization': f'Bearer {NOTION_API_KEY}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }

        def check_database_exists(db_id):
            url = f'https://api.notion.com/v1/databases/{db_id}'
            response = requests.get(url, headers=NOTION_HEADERS)
            return response.status_code == 200

        def create_database():
            url = 'https://api.notion.com/v1/databases'
            data = {
                "parent": {"type": "page_id", "page_id": "14821362320c8080b2cbff4ec64ebc04"},
                "title": [{"type": "text", "text": {"content": "Logs NextDNS"}}],
                "properties": {
                    "Domain": {"title": {}},
                    "Device": {"rich_text": {}},
                    "Timestamp": {"date": {}},
                    "Status": {"select": {
                        "options": [
                            {"name": "Blocked", "color": "red"},
                            {"name": "Allowed", "color": "green"}
                        ]
                    }},
                    "Query Type": {"select": {}},
                    "Client IP": {"rich_text": {}},
                    "Protocol": {"select": {}}
                }
            }
            response = requests.post(url, headers=NOTION_HEADERS, json=data)
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise Exception(f"Falha ao criar o banco de dados: {response.text}")

        def add_entry(domain, device, timestamp, status, query_type, client_ip, protocol):
            data = {
                "parent": {"database_id": NOTION_DATABASE_ID},
                "properties": {
                    "Domain": {"title": [{"text": {"content": domain}}]},
                    "Device": {"rich_text": [{"text": {"content": device}}]},
                    "Timestamp": {"date": {"start": timestamp}},
                    "Status": {"select": {"name": status}},
                    "Query Type": {"select": {"name": query_type}},
                    "Client IP": {"rich_text": [{"text": {"content": client_ip}}]},
                    "Protocol": {"select": {"name": protocol}}
                }
            }
            response = requests.post('https://api.notion.com/v1/pages', headers=NOTION_HEADERS, json=data)
            return response.status_code == 200

        def fetch_nextdns_logs():
            url = f'https://api.nextdns.io/profiles/{NEXTDNS_PROFILE_ID}/logs'
            headers = {'X-Api-Key': NEXTDNS_API_KEY}
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response.json().get('data', [])
            else:
                raise Exception(f"Falha ao obter logs do NextDNS: {response.text}")

        # Verificar e criar banco de dados se necessário
        if not check_database_exists(NOTION_DATABASE_ID):
            print("Banco de dados não encontrado. Criando um novo...")
            NOTION_DATABASE_ID = create_database()
            print(f"Novo banco de dados criado com ID: {NOTION_DATABASE_ID}")

        # Buscar e processar logs
        logs = fetch_nextdns_logs()
        for log in logs:
            domain = log.get('domain', 'N/A')
            device = log.get('device', {}).get('name', 'Unknown')
            timestamp = datetime.fromtimestamp(log.get('timestamp', 0)).isoformat()
            status = 'Blocked' if log.get('blocked') else 'Allowed'
            query_type = log.get('type', 'Unknown')
            client_ip = log.get('clientIp', 'Unknown')
            protocol = log.get('protocol', 'Unknown')

            success = add_entry(domain, device, timestamp, status, query_type, client_ip, protocol)
            if success:
                print(f"Entrada adicionada para {domain}")
            else:
                print(f"Falha ao adicionar entrada para {domain}")

        print("Processamento de logs concluído.")
        EOF
