name: Capture and Process NextDNS Logs

on:
  schedule:
    - cron: '0 0 * * *'  # Executa diariamente à meia-noite (UTC)
  workflow_dispatch:

jobs:
  process-logs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Check Notion Database and Process Logs
      run: |
        python - <<EOF
        import requests
        import json
        from datetime import datetime

        # Configurações
        NOTION_API_KEY = 'ntn_G89151370362xFd0vbIxGyRniZndeBtI9z3HgYgt7Z6fvY'
        NOTION_DATABASE_ID = '14c21362320c81e78569fe440f1ae157'
        NEXTDNS_API_KEY = 'f31f2871d328a52a45fefadc09a1c67d0dd5d53d'
        NEXTDNS_PROFILE_ID = '85d564'

        NOTION_HEADERS = {
            'Authorization': f'Bearer {NOTION_API_KEY}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }

        def check_database_exists(db_id):
            url = f'https://api.notion.com/v1/databases/{db_id}'
            response = requests.get(url, headers=NOTION_HEADERS)
            return response.status_code == 200

        def create_database():
            url = 'https://api.notion.com/v1/databases'
            data = {
                "parent": {"type": "page_id", "page_id": "PÁGINA_ID_AQUI"},
                "title": [{"type": "text", "text": {"content": "Logs NextDNS"}}],
                "properties": {
                    "URL": {"title": {}},
                    "Device": {"rich_text": {}},
                    "Timestamp": {"date": {}},
                    "Status": {"select": {}}
                }
            }
            response = requests.post(url, headers=NOTION_HEADERS, json=data)
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise Exception(f"Falha ao criar o banco de dados: {response.text}")

        def add_entry(url, device, timestamp, status):
            data = {
                "parent": {"database_id": NOTION_DATABASE_ID},
                "properties": {
                    "URL": {"title": [{"text": {"content": url}}]},
                    "Device": {"rich_text": [{"text": {"content": device}}]},
                    "Timestamp": {"date": {"start": timestamp}},
                    "Status": {"select": {"name": status}}
                }
            }
            response = requests.post('https://api.notion.com/v1/pages', headers=NOTION_HEADERS, json=data)
            return response.status_code == 200

        def fetch_nextdns_logs():
            url = f'https://api.nextdns.io/profiles/{NEXTDNS_PROFILE_ID}/logs'
            headers = {'X-Api-Key': NEXTDNS_API_KEY}
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response.json().get('data', [])
            else:
                raise Exception(f"Falha ao obter logs do NextDNS: {response.text}")

        # Verificar e criar banco de dados se necessário
        if not check_database_exists(NOTION_DATABASE_ID):
            print("Banco de dados não encontrado. Criando um novo...")
            NOTION_DATABASE_ID = create_database()
            print(f"Novo banco de dados criado com ID: {NOTION_DATABASE_ID}")

        # Buscar e processar logs
        logs = fetch_nextdns_logs()
        for log in logs:
            url = log.get('url', 'N/A')
            device = log.get('device', 'Unknown')
            timestamp = log.get('timestamp', datetime.now().isoformat())
            status = log.get('status', 'Unknown')

            success = add_entry(url, device, timestamp, status)
            if success:
                print(f"Entrada adicionada para {url}")
            else:
                print(f"Falha ao adicionar entrada para {url}")

        print("Processamento de logs concluído.")
        EOF

    - name: Commit and Push Logs
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        git add .
        git commit -m "Update logs $(date +'%Y-%m-%d')" || echo "No changes to commit"
        git push
