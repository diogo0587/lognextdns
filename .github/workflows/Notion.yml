name: Check Notion Database and Process Logs

on:
  push:
    branches:
      - main
      - release/*

jobs:
  process_logs:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Run Python Script
      run: |
        python - <<EOF
        import requests
        import json

        # Configurações (chaves e IDs fixos no código)
        NOTION_API_KEY = 'ntn_G89151370362xFd0vbIxGyRniZndeBtI9z3HgYgt7Z6fvY'
        NEXTDNS_API_KEY = 'f31f2871d328a52a45fefadc09a1c67d0dd5d53d'
        NEXTDNS_PROFILE_ID = '85d564'
        NOTION_DATABASE_ID = '15921362320c806b8a99d04cf87147c2'

        NOTION_HEADERS = {
            'Authorization': f'Bearer {NOTION_API_KEY}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }

        def check_database_structure(db_id):
            url = f'https://api.notion.com/v1/databases/{db_id}'
            response = requests.get(url, headers=NOTION_HEADERS)
            if response.status_code == 200:
                database = response.json()
                required_properties = {"Domain", "Device", "Timestamp", "Status", "Query Type", "Client IP", "Protocol"}
                existing_properties = set(database.get("properties", {}).keys())
                return required_properties.issubset(existing_properties)
            return False

        def create_or_update_database():
            url = f'https://api.notion.com/v1/databases/{NOTION_DATABASE_ID}'
            response = requests.get(url, headers=NOTION_HEADERS)

            if response.status_code == 404 or not check_database_structure(NOTION_DATABASE_ID):
                print("Banco de dados não encontrado ou estrutura incorreta. Criando um novo...")
                url_create = 'https://api.notion.com/v1/databases'
                data = {
                    "parent": {"type": "page_id", "page_id": "16421362320c80acaf6a000c4fd3f582"},
                    "title": [{"type": "text", "text": {"content": "Logs NextDNS"}}],
                    "properties": {
                        "Domain": {"title": {}},
                        "Device": {"rich_text": {}},
                        "Timestamp": {"date": {}},
                        "Status": {"select": {
                            "options": [
                                {"name": "Blocked", "color": "red"},
                                {"name": "Allowed", "color": "green"}
                            ]
                        }},
                        "Query Type": {"select": {}},
                        "Client IP": {"rich_text": {}},
                        "Protocol": {"select": {}}
                    }
                }
                response_create = requests.post(url_create, headers=NOTION_HEADERS, json=data)
                if response_create.status_code == 200:
                    return response_create.json()['id']
                else:
                    raise Exception(f"Falha ao criar o banco de dados: {response_create.text}")
            else:
                print("Banco de dados existente e válido.")
                return NOTION_DATABASE_ID

        def add_entry(domain, device, timestamp, status, query_type, client_ip, protocol):
            data = {
                "parent": {"database_id": NOTION_DATABASE_ID},
                "properties": {
                    "Domain": {"title": [{"text": {"content": domain}}]},
                    "Device": {"rich_text": [{"text": {"content": device}}]},
                    "Timestamp": {"date": {"start": timestamp}},
                    "Status": {"select": {"name": status}},
                    "Query Type": {"select": {"name": query_type}},
                    "Client IP": {"rich_text": [{"text": {"content": client_ip}}]},
                    "Protocol": {"select": {"name": protocol}}
                }
            }
            response = requests.post('https://api.notion.com/v1/pages', headers=NOTION_HEADERS, json=data)
            if response.status_code != 200:
                raise Exception(f"Falha ao adicionar entrada ao banco de dados: {response.text}")

        def fetch_nextdns_logs():
            url = f'https://api.nextdns.io/profiles/{NEXTDNS_PROFILE_ID}/logs'
            headers = {'X-Api-Key': NEXTDNS_API_KEY}
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response.json().get('data', [])
            else:
                raise Exception(f"Falha ao obter logs do NextDNS: {response.text}")

        # Verificar e criar/atualizar banco de dados se necessário
        NOTION_DATABASE_ID = create_or_update_database()

        # Buscar e processar logs do NextDNS
        logs = fetch_nextdns_logs()
        for log in logs:
            domain = log.get('domain', 'N/A')
            device = log.get('device', 'Unknown')
            timestamp = log.get('timestamp', '')
            status = log.get('status', 'Allowed')
            query_type = log.get('queryType', 'Unknown')
            client_ip = log.get('clientIp', 'Unknown')
            protocol = log.get('protocol', 'Unknown')

            add_entry(domain, device, timestamp, status, query_type, client_ip, protocol)
         EOF
