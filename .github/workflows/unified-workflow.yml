name: NextDNS Unified Workflow

on:
  schedule:
    - cron: '30 1 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NEXTDNS_PROFILE_ID: '85d564'
  HUGO_VERSION: '0.124.1'
  BASEURL: "https://diogo0587.github.io/lognextdns/painel/"

jobs:
  nextdns-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Limpa resíduos e temas órfãos (incl. ananke)
      - name: Remove orphaned themes/submodules
        run: |
          rm -rf painel/themes/ananke themes/ananke themes/*ananke* || true
          rm -rf painel
          mkdir -p painel

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install requests jinja2 python-dateutil

      - name: Fetch NextDNS Logs
        id: fetch-logs
        env:
          NEXTDNS_API_KEY: ${{ secrets.NEXTDNS_API_KEY }}
        run: |
          mkdir -p data/logs
          DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          for attempt in 1 2 3; do
            if curl -s -f \
                -H "X-Api-Key: ${NEXTDNS_API_KEY}" \
                -H "Accept: application/json" \
                "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/logs" \
                -o "data/logs/raw_${TIMESTAMP}.json"; then
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            else
              if [ $attempt -eq 3 ]; then
                echo "success=false" >> $GITHUB_OUTPUT
                exit 0
              fi
              sleep 10
            fi
          done

      - name: Process and Analyze Logs  
        if: steps.fetch-logs.outputs.success == 'true'
        run: |
          python3 <<'EOF'
          import json
          import os
          from datetime import datetime
          from collections import Counter
          import glob
          raw_files = glob.glob("data/logs/raw_*.json")
          if not raw_files:
              exit(1)
          latest_raw = max(raw_files)
          with open(latest_raw, 'r') as f:
              logs_data = json.load(f)
          logs = logs_data.get('data', [])
          processed_data = {
              'metadata': {
                  'timestamp': datetime.now().isoformat(),
                  'total_entries': len(logs),
                  'profile_id': os.environ.get('NEXTDNS_PROFILE_ID'),
                  'date_range': {
                      'start': logs[-1]['timestamp'] if logs else None,
                      'end': logs[0]['timestamp'] if logs else None
                  }
              },
              'statistics': {},
              'top_domains': {},
              'recent_logs': logs[:50]
          }
          status_count = Counter(log.get('status', 'unknown') for log in logs)
          type_count = Counter(log.get('type', 'unknown') for log in logs)
          domain_count = Counter(log.get('name', 'unknown') for log in logs)
          client_count = Counter(log.get('clientIp', 'unknown') for log in logs)
          processed_data['statistics'] = {
              'by_status': dict(status_count),
              'by_type': dict(type_count), 
              'by_client': dict(client_count.most_common(10)),
              'blocked_percentage': round((status_count.get('blocked', 0) / len(logs)) * 100, 2) if logs else 0
          }
          processed_data['top_domains'] = {
              'all': dict(domain_count.most_common(20)),
              'blocked': dict(Counter(
                  log.get('name') for log in logs 
                  if log.get('status') == 'blocked'
              ).most_common(10))
          }
          os.makedirs('painel/content/data', exist_ok=True)
          with open('painel/content/data/processed_logs.json', 'w') as f:
              json.dump(processed_data, f, indent=2)
          with open('painel/content/data/summary.json', 'w') as f:
              json.dump({
                  'last_update': datetime.now().isoformat(),
                  'total_queries': len(logs),
                  'blocked_queries': status_count.get('blocked', 0),
                  'allowed_queries': status_count.get('allowed', 0),
                  'blocked_percentage': processed_data['statistics']['blocked_percentage']
              }, f, indent=2)
          EOF

      - name: Check and Bootstrap Hugo Structure (painel/)
        run: |
          rm -rf painel/themes
          mkdir -p painel/themes painel/content/{posts,pages,data} painel/layouts/{_default,partials} painel/static/{css,js}
          cat > painel/config.toml <<EOF
          baseURL = "${BASEURL}"
          languageCode = "pt-br"
          title = "NextDNS Logs Dashboard"
          theme = "beautifulhugo"
          [params]
            description = "Dashboard de logs do NextDNS"
            github_url = "https://github.com/diogo0587/lognextdns"
          [markup]
            [markup.goldmark]
              [markup.goldmark.renderer]
                unsafe = true
          EOF
          git clone --depth=1 https://github.com/halogenica/beautifulhugo.git painel/themes/beautifulhugo
          cat > painel/content/_index.md <<EOF
          ---
          title: "NextDNS Logs Dashboard"
          description: "Dashboard de monitoramento dos logs do NextDNS"
          ---
          # Dashboard NextDNS
          Este dashboard apresenta informações em tempo real dos logs do NextDNS.
          ## Estatísticas Recentes
          Os dados são atualizados automaticamente via GitHub Actions.
          EOF

      - name: Generate Hugo Content from Logs (painel/)
        if: steps.fetch-logs.outputs.success == 'true'
        run: |
          python3 <<'EOF'
          import json
          from datetime import datetime
          try:
              with open('painel/content/data/processed_logs.json', 'r') as f:
                  data = json.load(f)
          except FileNotFoundError:
              exit(1)
          stats = data['statistics']
          domains = data['top_domains']
          stats_content = f"""---
          title: "Estatísticas de Logs"
          date: {datetime.now().isoformat()}
          draft: false
          ---
          # Estatísticas NextDNS
          **Última atualização:** {data['metadata']['timestamp']}
          ## Resumo Geral
          - **Total de consultas:** {data['metadata']['total_entries']:,}
          - **Consultas bloqueadas:** {stats['by_status'].get('blocked', 0):,}
          - **Consultas permitidas:** {stats['by_status'].get('allowed', 0):,}
          - **Taxa de bloqueio:** {stats['blocked_percentage']}%
          ## Top 10 Domínios Mais Acessados
          """
          for i, (domain, count) in enumerate(domains['all'].items(), 1):
              if i <= 10:
                  stats_content += f"{i}. **{domain}** - {count:,} consultas\n"
          stats_content += "\n## Top 10 Domínios Bloqueados\n\n"
          for i, (domain, count) in enumerate(domains['blocked'].items(), 1):
              if i <= 10:
                  stats_content += f"{i}. **{domain}** - {count:,} bloqueios\n"
          with open('painel/content/statistics.md', 'w') as f:
              f.write(stats_content)
          EOF

      - name: Build Hugo Site (painel/)
        id: build-hugo
        if: steps.fetch-logs.outputs.success == 'true'
        run: |
          hugo -s painel --minify --cleanDestinationDir
          if [ -d "painel/public" ] && [ "$(ls -A painel/public)" ]; then
            echo "✅ painel/public directory contains files"
            ls -la painel/public/
          else
            echo "❌ painel/public directory is empty or missing"
            exit 1
          fi

      - name: Commit Changes
        if: steps.fetch-logs.outputs.success == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add painel/
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
            exit 0
          fi
          git commit -m "📊 Update NextDNS painel dashboard - $(date +'%Y-%m-%d %H:%M')"
          git push
          echo "✅ Changes committed and pushed"

      - name: Deploy to GitHub Pages (painel/public)
        if: steps.build-hugo.outcome == 'success'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./painel/public
          force_orphan: true
          commit_message: "🚀 Deploy NextDNS painel dashboard - $(date +'%Y-%m-%d %H:%M')"

      - name: Workflow Summary
        if: always()
        run: |
          echo "## 📊 NextDNS Unified Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Logs Fetched:** ${{ steps.fetch-logs.outputs.success }}" >> $GITHUB_STEP_SUMMARY  
          echo "**Hugo Built:** ${{ steps.build-hugo.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          
