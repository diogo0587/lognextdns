name: Capture NextDNS Logs and Publish

on:
  schedule:
    - cron: '0 0 * * *'  # Executa todo dia à meia-noite (UTC)
  workflow_dispatch:  # Permite execução manual

env:
  NEXTDNS_API_KEY: ${{ secrets.NEXTDNS_API_KEY }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests jinja2

    - name: Create Dockerfile
      run: |
        echo "FROM python:3.9" > Dockerfile
        echo "WORKDIR /app" >> Dockerfile
        echo "COPY requirements.txt ." >> Dockerfile
        echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
        echo "COPY . ." >> Dockerfile
        echo "ENV NEXTDNS_API_KEY=${{ secrets.NEXTDNS_API_KEY }}" >> Dockerfile
        echo "CMD [\"python\", \"nextdns_logs.py\"]" >> Dockerfile

    - name: Create requirements.txt
      run: |
        echo "requests==2.26.0" > requirements.txt
        echo "jinja2==3.0.1" >> requirements.txt

    - name: Create Python script
      run: |
        cat << EOF > nextdns_logs.py
        import os
        import requests
        from datetime import datetime
        from jinja2 import Template

        NEXTDNS_API_KEY = os.environ.get('NEXTDNS_API_KEY')
        NEXTDNS_PROFILE_ID = '85d564'

        def fetch_logs():
            url = f"https://api.nextdns.io/profiles/{NEXTDNS_PROFILE_ID}/logs"
            headers = {"X-Api-Key": NEXTDNS_API_KEY}
            response = requests.get(url, headers=headers)
            return response.json()['data']

        def generate_html(logs):
            template = Template('''
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>NextDNS Logs</title>
                <style>
                    body { font-family: Arial, sans-serif; }
                    table { width: 100%; border-collapse: collapse; }
                    th, td { text-align: left; padding: 8px; }
                    th { background-color: #f2f2f2; }
                    tr:nth-child(even) { background-color: #f9f9f9; }
                    tr:hover { background-color: #f1f1f1; }
                    h1 { text-align: center; }
                </style>
            </head>
            <body>
                <h1>NextDNS Logs para {{ date }}</h1>
                <table border="1">
                    <tr>
                        <th>Timestamp</th>
                        <th>Domínio</th>
                        <th>Tipo</th>
                        <th>Status</th>
                        <th>IP do Cliente</th>
                    </tr>
                    {% for log in logs %}
                    <tr>
                        <td>{{ log.timestamp }}</td>
                        <td><a href="http://{{ log.domain }}">{{ log.domain }}</a></td>
                        <td>{{ log.type }}</td>
                        <td>{{ log.status }}</td>
                        <td>{{ log.clientIp }}</td>
                    </tr>
                    {% endfor %}
                </table>
            </body>
            </html>
            ''')
            return template.render(logs=logs, date=datetime.now().strftime('%Y-%m-%d'))

        if __name__ == "__main__":
            logs = fetch_logs()
            html_content = generate_html(logs)
            with open('index.html', 'w') as f:
                f.write(html_content)
        EOF

    - name: Build and run Docker image
      run: |
        docker build -t nextdns-logs .
        docker run --env NEXTDNS_API_KEY=${{ secrets.NEXTDNS_API_KEY }} nextdns-logs

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
