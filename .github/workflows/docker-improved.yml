name: NextDNS Logs Dashboard with Docker

on:
  schedule:
    - cron: '0 2 * * *' # Executa diariamente às 02:00 UTC
  workflow_dispatch: # Permite execução manual
  push:
    branches: [main]
    paths: 
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/docker-improved.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create optimized Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          # Multi-stage build for smaller final image
          FROM python:3.11-slim as builder
          
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y --no-install-recommends \
              gcc \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy requirements first for better caching
          COPY requirements.txt .
          RUN pip install --no-cache-dir --user -r requirements.txt
          
          # Production stage
          FROM python:3.11-slim
          
          WORKDIR /app
          
          # Create non-root user
          RUN useradd --create-home --shell /bin/bash app
          
          # Copy Python packages from builder
          COPY --from=builder /root/.local /home/app/.local
          
          # Make sure scripts in .local are usable
          ENV PATH=/home/app/.local/bin:$PATH
          
          # Copy application code
          COPY --chown=app:app . .
          
          # Switch to non-root user
          USER app
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1
          
          EXPOSE 8000
          
          CMD ["python", "nextdns_dashboard.py"]
          EOF

      - name: Create requirements.txt
        run: |
          cat << 'EOF' > requirements.txt
          requests==2.31.0
          jinja2==3.1.2
          flask==2.3.3
          gunicorn==21.2.0
          python-dateutil==2.8.2
          EOF

      - name: Create NextDNS Dashboard Application
        run: |
          mkdir -p src templates static
          
          cat << 'EOF' > nextdns_dashboard.py
          import os
          import requests
          from datetime import datetime, timedelta
          from flask import Flask, render_template, jsonify
          import json
          import logging
          
          app = Flask(__name__)
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          # Configuration from environment variables
          NEXTDNS_API_KEY = os.environ.get('NEXTDNS_API_KEY')
          NEXTDNS_PROFILE_ID = os.environ.get('NEXTDNS_PROFILE_ID', '85d564')
          
          def fetch_nextdns_logs():
              """Fetch logs from NextDNS API with error handling"""
              if not NEXTDNS_API_KEY:
                  logger.error("NEXTDNS_API_KEY not set")
                  return None
                  
              url = f"https://api.nextdns.io/profiles/{NEXTDNS_PROFILE_ID}/logs"
              headers = {"X-Api-Key": NEXTDNS_API_KEY}
              
              try:
                  response = requests.get(url, headers=headers, timeout=30)
                  response.raise_for_status()
                  return response.json()
              except requests.RequestException as e:
                  logger.error(f"Error fetching logs: {e}")
                  return None
          
          @app.route('/')
          def dashboard():
              """Main dashboard route"""
              logs_data = fetch_nextdns_logs()
              
              if not logs_data or 'data' not in logs_data:
                  return render_template('error.html', 
                                       message="Unable to fetch NextDNS logs")
              
              # Process logs for dashboard
              logs = logs_data['data'][:100]  # Last 100 entries
              
              stats = {
                  'total_queries': len(logs),
                  'blocked_queries': len([log for log in logs if log.get('status') == 'blocked']),
                  'allowed_queries': len([log for log in logs if log.get('status') == 'allowed']),
                  'top_domains': {}
              }
              
              # Calculate top domains
              for log in logs:
                  domain = log.get('name', 'unknown')
                  stats['top_domains'][domain] = stats['top_domains'].get(domain, 0) + 1
              
              # Sort top domains
              stats['top_domains'] = dict(sorted(
                  stats['top_domains'].items(), 
                  key=lambda x: x[1], 
                  reverse=True
              )[:10])
              
              return render_template('dashboard.html', logs=logs, stats=stats)
          
          @app.route('/api/logs')
          def api_logs():
              """API endpoint for logs"""
              logs_data = fetch_nextdns_logs()
              return jsonify(logs_data) if logs_data else jsonify({"error": "Unable to fetch logs"})
          
          @app.route('/health')
          def health_check():
              """Health check endpoint"""
              return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})
          
          if __name__ == '__main__':
              port = int(os.environ.get('PORT', 8000))
              app.run(host='0.0.0.0', port=port, debug=False)
          EOF

          # Create basic HTML templates
          cat << 'EOF' > templates/dashboard.html
          <!DOCTYPE html>
          <html>
          <head>
              <title>NextDNS Dashboard</title>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .stat-card { background: #f5f5f5; padding: 20px; border-radius: 8px; text-align: center; }
                  .stat-number { font-size: 2em; font-weight: bold; color: #2196F3; }
                  table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                  th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
                  .blocked { color: #f44336; }
                  .allowed { color: #4CAF50; }
              </style>
          </head>
          <body>
              <h1>NextDNS Logs Dashboard</h1>
              
              <div class="stats">
                  <div class="stat-card">
                      <div class="stat-number">{{ stats.total_queries }}</div>
                      <div>Total Queries</div>
                  </div>
                  <div class="stat-card">
                      <div class="stat-number">{{ stats.blocked_queries }}</div>
                      <div>Blocked</div>
                  </div>
                  <div class="stat-card">
                      <div class="stat-number">{{ stats.allowed_queries }}</div>
                      <div>Allowed</div>
                  </div>
              </div>
              
              <h2>Recent Queries</h2>
              <table>
                  <thead>
                      <tr>
                          <th>Timestamp</th>
                          <th>Domain</th>
                          <th>Type</th>
                          <th>Status</th>
                          <th>Client</th>
                      </tr>
                  </thead>
                  <tbody>
                      {% for log in logs %}
                      <tr>
                          <td>{{ log.timestamp }}</td>
                          <td>{{ log.name }}</td>
                          <td>{{ log.type }}</td>
                          <td class="{{ log.status }}">{{ log.status }}</td>
                          <td>{{ log.clientIp }}</td>
                      </tr>
                      {% endfor %}
                  </tbody>
              </table>
          </body>
          </html>
          EOF
          
          cat << 'EOF' > templates/error.html
          <!DOCTYPE html>
          <html>
          <head>
              <title>Error - NextDNS Dashboard</title>
          </head>
          <body>
              <h1>Error</h1>
              <p>{{ message }}</p>
          </body>
          </html>
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container and generate static site
        run: |
          # Run container with logs generation
          docker run --rm \
            -e NEXTDNS_API_KEY="${{ secrets.NEXTDNS_API_KEY }}" \
            -e NEXTDNS_PROFILE_ID="85d564" \
            -v $PWD/output:/app/output \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            python -c "
          import os
          from nextdns_dashboard import fetch_nextdns_logs
          import json
          from datetime import datetime
          
          # Create output directory
          os.makedirs('/app/output', exist_ok=True)
          
          # Fetch and save logs
          logs_data = fetch_nextdns_logs()
          if logs_data:
              with open('/app/output/logs.json', 'w') as f:
                  json.dump(logs_data, f, indent=2)
              
              # Create simple HTML
              html = f'''
              <!DOCTYPE html>
              <html>
              <head><title>NextDNS Logs</title></head>
              <body>
                  <h1>NextDNS Logs</h1>
                  <p>Generated: {datetime.now().isoformat()}</p>
                  <p>Total entries: {len(logs_data.get('data', []))}</p>
                  <a href=\"logs.json\">Download JSON</a>
              </body>
              </html>
              '''
              with open('/app/output/index.html', 'w') as f:
                  f.write(html)
          "

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          cname: # Add your custom domain here if needed